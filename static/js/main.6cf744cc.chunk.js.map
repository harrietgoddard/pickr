{"version":3,"sources":["assets/icons/tshirt.svg","components/Header/index.js","components/_ControlPanelComponents/SelectNumber/SelectNumber.js","data/action.js","components/_ControlPanelComponents/SelectNumber/index.js","components/PlayerForm/FormField.js","components/PlayerForm/PlayerForm.js","components/PlayerForm/index.js","components/_ControlPanelComponents/GenerateTeamsForm/FormField.js","components/_ControlPanelComponents/GenerateTeamsForm/GenerateTeamsForm.js","components/_ControlPanelComponents/GenerateTeamsForm/index.js","components/_ControlPanelComponents/ConfirmButton/ConfirmButton.js","components/_ControlPanelComponents/ConfirmButton/index.js","components/_ControlPanelComponents/ResetButton/ResetButton.js","components/_ControlPanelComponents/ResetButton/index.js","components/_ControlPanelComponents/ErrorMessage/index.js","components/ControlPanel/ControlPanel.js","components/ControlPanel/index.js","components/PlayerList/PlayerList.js","components/PlayerList/index.js","components/TeamList/TeamList.js","components/TeamList/TeamList1.js","components/TeamList/TeamList2.js","components/HomeButton/HomeButton.js","components/HomeButton/HomeButton1.js","components/HomeButton/HomeButton2.js","components/ColorPicker/ColorPicker.js","components/ColorPicker/ColorPicker1.js","components/ColorPicker/ColorPicker2.js","data/settings.js","components/TeamStaging/TeamStaging.js","components/TeamStaging/index.js","components/Predictions/Predictions.js","components/Predictions/index.js","components/TeamKit/index.js","components/TeamConfirmed/TeamConfirmed.js","components/TeamConfirmed/index.js","components/Main/Main.js","components/Main/index.js","App.js","data/initial.js","data/reducer/changeNoOfPlayers.js","data/reducer/addPlayer.js","data/reducer/deletePlayer.js","data/reducer/checkNoOfPlayers.js","data/reducer/teamPicker.js","data/reducer/generateTeams.js","data/reducer/toggleBalanced.js","data/reducer/toggleHome.js","data/reducer/predictor.js","data/reducer/getPredictions.js","data/reducer/showTeams.js","data/reducer/setColor.js","data/reducer/reducer.js","data/store.js","index.js"],"names":["module","exports","Header","className","SelectNumber","min","max","numberOfPlayers","handleIncrement","handleDecrement","onClick","disabled","changeNumber","value","type","connect","dispatch","FormField","name","label","step","disable","inputClass","containerClass","handleChange","nameRef","htmlFor","id","onChange","ref","required","PlayerForm","props","handleName","e","setState","playerName","currentTarget","handleSkill","playerSkill","handleSubmit","preventDefault","state","nameInput","React","createRef","bind","handleFocus","this","focus","onSubmit","Component","data","addPlayer","handleToggle","checked","GenerateTeamsForm","balanced","handleClick","ConfirmButton","ResetButton","ErrorMessage","ControlPanel","tooManyPlayers","playerInputComplete","teamsGenerated","PlayerList","playerList","refs","scrollTop","scrollHeight","clientHeight","players","map","player","index","key","skill","deletePlayer","TeamList","playersTeam","color","style","backgroundColor","playersTeam1","color1","playersTeam2","color2","HomeButton","homeOrAway","home","ColorPicker","handleChangeComplete","handleColor","hex","colors","circleSize","circleSpacing","onChangeComplete","team","setColor1","setColor2","teamName","TeamStaging","TeamList1","ColorPicker1","HomeButton1","TeamList2","ColorPicker2","HomeButton2","Predictions","predictions","showPredictions","homeAdvantage","favourite","unfavourite","favouriteHome","favouriteSkills","unfavouriteSkills","TeamKit","src","require","alt","TeamConfirmed","Main","teamsConfirmed","App","initial","changeNoOfPlayers","action","newPlayers","filter","checkNoOfPlayers","currentNoOfPlayers","length","enoughPlayers","splitArrays","arr","n","isDivisible","container","i","push","item","randomTeams","numberOfTeams","result","randomIndex","Math","floor","random","currentValue","shuffle","generateTeams","teams","sort","a","b","balancedTeams","team1","team2","toggleBalanced","toggleHome","newHomeTeam","totalTeamSkills","reduce","total","addHomeAdvantage","totalSkills","getPredictions","scores","team1Total","team2Total","calculateScores","calculateFavourite","toFixed","showTeams","setColor","reducer","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6cf744cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tshirt.f2ddd09a.svg\";","import React from 'react';\n\nconst Header = () => {\n\n    return (\n        <header className=\"header-main\">\n\n            <h2 className=\"title-main-small\">Football team</h2>\n            <h1 className=\"title-main\">Pickr</h1>\n            <p className=\"text-medium\"> Team selector and predictor</p>\n            \n        </header>\n    );\n\n};\n\nexport default Header;","import React from 'react';\n\nconst SelectNumber = ({ \n    min,\n    max,\n    numberOfPlayers,\n    handleIncrement, \n    handleDecrement, \n}) => {\n\n    return (\n        <div className=\"select-number\">\n\n            <p\n            className=\"text-large\"\n            >Select mode: { numberOfPlayers }&#8209;a​&#8209;side\n            </p>\n\n            <button \n                onClick={ handleIncrement }\n                disabled={ numberOfPlayers === max }\n                className=\"btn-small\"\n            >&#x25B2;</button>\n\n            <button \n                onClick={ handleDecrement }\n                disabled={ numberOfPlayers === min }\n                className=\"btn-small\"\n            >&#x25BC;</button>\n            \n        </div>\n    );\n\n};\n\nexport default SelectNumber;","export const changeNumber = value => {\n\n    return {\n        type: \"CHANGE_NO_OF_PLAYERS\",\n        value,\n    };\n\n};\n\nexport const addPlayer = data => {\n\n    return {\n        type: \"ADD_PLAYER\",\n        data,\n    };\n\n};\n\nexport const deletePlayer = index => {\n\n    return {\n        type: \"DELETE_PLAYER\",\n        index,\n    };\n\n};\n\nexport const reset = () => {\n\n    return {\n        type: \"RESET\",\n    };\n\n};\n\nexport const generateTeams = () => {\n\n    return {\n        type: \"GENERATE_TEAMS\",\n    };\n\n};\n\nexport const toggleBalanced = () => {\n\n    return {\n        type: \"TOGGLE_BALANCED\",\n    };\n\n};\n\nexport const toggleHome = () => {\n\n    return {\n        type: \"TOGGLE_HOME\",\n    };\n\n};\n\nexport const getPredictions = () => {\n\n    return {\n        type: \"GET_PREDICTIONS\",\n    };\n\n};\n\nexport const showTeams = () => {\n\n    return {\n        type: \"SHOW_TEAMS\",\n    };\n\n};\n\nexport const setColor1 = data => {\n\n    return {\n        type: \"SET_COLOR\",\n        team: 1,\n        color: data,\n    };\n\n};\n\nexport const setColor2 = data => {\n    \n    return {\n        type: \"SET_COLOR\",\n        team: 2,\n        color: data,\n    };\n    \n};","import { connect } from 'react-redux';\nimport SelectNumber from './SelectNumber';\nimport { changeNumber } from '../../../data/action';\n\nconst mapStateToProps = ({ numberOfPlayers }) => ({ numberOfPlayers });\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleIncrement: () => dispatch(changeNumber(1)),\n        handleDecrement: () => dispatch(changeNumber(-1)),\n    };\n    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectNumber);","import React from 'react';\n\nconst FormField = ({ \n    name, \n    label, \n    type, \n    value,\n    min,\n    max,\n    step,\n    disable,\n    inputClass,\n    containerClass,\n    handleChange,\n    nameRef \n}) => {\n\n    return (\n        <div className={ containerClass }>\n\n            <label \n            htmlFor={ name }\n            className=\"text-small\"\n            >{ label }</label>\n\n            <input \n                id={ name } \n                name={ name }\n                type={ type }\n                value={ value }\n                min={ min }\n                max={ max }\n                step={ step }\n                onChange={ handleChange }\n                ref={ nameRef }\n                required\n                disabled={ disable }\n                className={ inputClass }\n            />\n            \n        </div>\n    );\n\n};\n\nexport default FormField;","import React, { Component } from 'react';\nimport FormField from './FormField';\n\nclass PlayerForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //keep track of inputs in local state\n        this.state = {\n            playerName: \"\",\n            playerSkill: 2, //default skill rating\n        };\n\n        //create ref to refocus name input on click of 'add player' button\n        this.nameInput = React.createRef();\n\n        this.handleName = this.handleName.bind(this);\n        this.handleSkill = this.handleSkill.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n    };\n\n    //player name input\n    handleName = e => {\n        this.setState({\n            playerName: e.currentTarget.value\n        });\n    };\n\n    //player skill input\n    handleSkill = e => {\n        this.setState({\n            playerSkill: +e.currentTarget.value\n        });\n    };\n\n    //pass data up on submit of form and reset local state to initial\n    handleSubmit = (e) => {\n        e.preventDefault();\n        \n        this.props.handleSubmit({ ...this.state });\n\n        this.setState({\n            playerName: \"\",\n            playerSkill: 2,\n        });\n    };\n\n    //for refocusing on name input on click of 'add player' button\n    handleFocus() {\n        this.nameInput.focus();\n    };\n\n    render() {\n\n        const { playerName, playerSkill } = this.state;\n\n        return (           \n            <form \n                onSubmit={ this.handleSubmit }\n                className=\"form-container\"\n            >\n                \n                <div className=\"form-inputs\">\n\n                    <FormField\n                        name={ \"player-name\" }\n                        label={ \"Enter player name\" }\n                        type={ \"text\" }\n                        value={ playerName }\n                        handleChange={ this.handleName }\n                        inputClass={ \"text-input\"}\n                        containerClass={ \"form-field\" }\n                        nameRef={ ref => { this.nameInput = ref; } }\n                    />\n\n                    <FormField\n                        name={ \"player-skill\" }\n                        label={ \"Select skill level\" }\n                        type={ \"range\" }\n                        min={ \"1\" }\n                        max={ \"3\" }\n                        step={ \"1\" }\n                        value={ playerSkill }\n                        handleChange={ this.handleSkill }\n                        containerClass={ \"form-field\" }\n                    />\n\n                </div>\n\n                <button \n                    type=\"submit\"\n                    className=\"btn-medium btn-add\"\n                    onClick={ this.handleFocus }\n                >Add player</button>\n                \n            </form>\n        );\n\n    };\n};\n\nexport default PlayerForm;","import { connect } from \"react-redux\";\nimport PlayerForm from './PlayerForm';\nimport { addPlayer } from '../../data/action';\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleSubmit: data => { \n            dispatch(addPlayer(data));\n        }\n    };\n    \n};\n\nexport default connect(null, mapDispatchToProps)(PlayerForm);","import React from 'react';\n\nconst FormField = ({ \n    name, \n    label, \n    type, \n    value,\n    min,\n    max,\n    step, \n    handleToggle, \n}) => {\n\n    return (\n        <div className=\"control-message\">\n\n            <label \n                htmlFor={ name }\n                className=\"text-small\"\n            >{ label }</label>\n\n            <input \n                id={ name } \n                name={ name }\n                type={ type }\n                value={ value }\n                min={ min }\n                max={ max }\n                step={ step }\n                checked={ value }\n                onChange={ handleToggle }\n                required\n            />\n            \n        </div>\n    );\n\n};\n\nexport default FormField;","import React from 'react';\nimport FormField from './FormField';\n\nconst GenerateTeamsForm = ({ \n    balanced, \n    handleClick, \n    handleToggle \n}) => {\n\n    return (\n        <form className=\"form-generate\">\n\n            <FormField \n                name={ \"team-picker-type\" }\n                label={ \"Balance teams by skill?\" }\n                type={ \"checkbox\" }\n                value={ balanced }\n                handleToggle={ handleToggle }\n            />\n\n            <button\n                type=\"button\" \n                onClick={ handleClick }\n                className=\"btn-medium btn-generate\"\n            >Generate teams</button>\n            \n        </form>\n    );\n\n};\n\nexport default GenerateTeamsForm;","import { connect } from \"react-redux\";\nimport GenerateTeamsForm from './GenerateTeamsForm';\nimport { generateTeams, toggleBalanced } from '../../../data/action';\n\nconst mapStateToProps = ({ balanced }) => ({ balanced });\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleClick: () => dispatch(generateTeams()),\n        handleToggle: () => dispatch(toggleBalanced()),\n    };\n    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GenerateTeamsForm);","import React from 'react';\n\nconst ConfirmButton = ({ handleClick }) => {\n\n    return (\n        <div>\n\n            <p className=\"text-large customise\">\n\n                <span className=\"arrow bounce-left arrow-desktop\">\n                    &#8592;\n                </span> \n                Customise teams\n                <span className=\"arrow bounce-right arrow-desktop\">\n                    &#8594;\n                </span>\n                \n            </p>\n\n            <p className=\"arrow bounce-down arrow-mobile\">&#8595;</p>\n\n            <button \n                onClick={ handleClick }\n                className=\"btn-medium btn-generate\"\n            >Confirm teams</button>\n\n        </div>\n    );\n\n};\n\nexport default ConfirmButton;","import { connect } from \"react-redux\";\nimport ConfirmButton from './ConfirmButton';\nimport { showTeams } from '../../../data/action';\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleClick: () => { \n            dispatch(showTeams());\n        }\n    };\n    \n};\n\nexport default connect(null, mapDispatchToProps)(ConfirmButton);","import React from 'react';\n\nconst ResetButton = ({ handleClick }) => {\n\n    return (\n        <button \n            onClick={ handleClick }\n            className=\"btn-medium\"\n        >Reset</button>\n    );\n\n};\n\nexport default ResetButton;","import { connect } from \"react-redux\";\nimport ResetButton from './ResetButton';\nimport { reset } from '../../../data/action';\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleClick: () => { \n            dispatch(reset());\n        }\n    };\n    \n};\n\nexport default connect(null, mapDispatchToProps)(ResetButton);","import React from 'react';\n\nconst ErrorMessage = () => {\n\n    return (\n        <div className=\"control-message\">\n\n            <p className=\"text-small\">Delete players</p>\n            <p className=\"arrow bounce-down\">&#8595;</p>\n\n        </div>\n    );\n\n};\n\nexport default ErrorMessage;","import React from 'react';\nimport SelectNumber from '../_ControlPanelComponents/SelectNumber/';\nimport PlayerForm from '../PlayerForm/';\nimport GenerateTeamsForm from '../_ControlPanelComponents/GenerateTeamsForm';\nimport ConfirmButton from '../_ControlPanelComponents/ConfirmButton';\nimport ResetButton from '../_ControlPanelComponents/ResetButton';\nimport ErrorMessage from '../_ControlPanelComponents/ErrorMessage';\n\nconst ControlPanel = ({ \n    min,\n    max,\n    tooManyPlayers,\n    playerInputComplete,\n    teamsGenerated, \n}) => {\n\n    return (\n        <section className=\"control-panel\">\n            \n            {/* show option to change no. of players per team before teams are generated*/}\n            { teamsGenerated ? null :\n                <SelectNumber max={ max } min={ min }/> \n            }\n\n            {/* show the add players form unless enough players have been added or too many players have been added */}\n            { playerInputComplete || tooManyPlayers ? null : \n                <PlayerForm /> \n            }\n\n            {/* show 'generate teams' button when enough players have been added, and then hide when teams have been generated */}\n            { !playerInputComplete || teamsGenerated ? null :\n                <GenerateTeamsForm />\n            }\n\n            {/* show 'delete players' message when too many players have been added */}\n            { !tooManyPlayers ? null :\n                <ErrorMessage />\n            }\n\n            {/* show 'confirm teams' button after teams have been generated */}\n            { !teamsGenerated ? null : \n                <ConfirmButton />\n            }\n            \n            <div className=\"reset-control-panel\">\n                <ResetButton />\n            </div>\n            \n        </section>\n    );\n\n};\n\nexport default ControlPanel;","import { connect } from \"react-redux\";\nimport ControlPanel from './ControlPanel';\n\nconst mapStateToProps = ({ tooManyPlayers, playerInputComplete, teamsGenerated }) => ({ tooManyPlayers, playerInputComplete, teamsGenerated });\n\nexport default connect(mapStateToProps)(ControlPanel);","import React, { Component } from 'react';\n\nclass PlayerList extends Component  {\n\n    //to keep the player list scroll bar at the bottom of the container when adding players\n    componentDidUpdate() {\n        \n        const { playerList } = this.refs;\n        \n        playerList.scrollTop = playerList.scrollHeight - playerList.clientHeight;\n\n    }\n\n    render() {\n        \n        const { players, handleClick } = this.props;\n\n        return (\n            <section>\n\n                <div className=\"player-list-container\"> \n\n                    <ul ref=\"playerList\" className=\"player-list\">\n\n                        { players.map((player,index) => {\n\n                            return (\n                                <li className=\"player-card\" key={ index }>\n\n                                    <p className=\"text-card\">{ player.name }</p>\n\n                                    <p className=\"text-card\">skill - { player.skill }</p>\n\n                                    <button\n                                        className=\"btn-xsmall btn-delete\"\n                                        onClick={ () => handleClick(index) }\n                                    >x</button>\n\n                                </li>\n                            )\n\n                        })}\n\n                    </ul>\n\n                </div>\n\n            </section>\n        );\n        \n    };\n\n};\n\nexport default PlayerList;","import { connect } from 'react-redux';\nimport PlayerList from './PlayerList';\nimport { deletePlayer } from '../../data/action';\n\nconst mapStateToProps = ({ players }) => ({ players });\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleClick: index => { \n            dispatch(deletePlayer(index));\n        }\n    };\n    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerList);","import React from 'react';\n\nconst TeamList = ({ \n    playersTeam, \n    color, \n    teamsGenerated \n}) => {\n\n    return (\n\n        !teamsGenerated ? null :\n   \n        <ul className=\"team-list\">\n\n            { playersTeam.map((player, index) => {\n\n                return (\n                    <li \n                        className=\"player-card\" \n                        key={ index }\n                        style={{ backgroundColor: color + \"80\"}} //80 adds opacity to hex color\n                    >\n\n                        <p className=\"text-card\">{ player.name }</p>\n\n                        <p className=\"text-card\">skill - { player.skill }</p>\n\n                    </li>\n                )\n\n            })}\n\n        </ul>\n           \n    );\n\n};\n\nexport default TeamList;","import { connect } from 'react-redux';\nimport TeamList from './TeamList';\n\nconst mapStateToProps = ({ playersTeam1, color1, teamsGenerated }) => {\n\n    return { \n        playersTeam: playersTeam1,\n        color: color1,\n        teamsGenerated, \n    };\n    \n};\n\nexport default connect(mapStateToProps)(TeamList);","import { connect } from 'react-redux';\nimport TeamList from './TeamList';\n\nconst mapStateToProps = ({ playersTeam2, color2, teamsGenerated }) => {\n\n    return { \n        playersTeam: playersTeam2,\n        color: color2,\n        teamsGenerated, \n    };\n    \n};\n\nexport default connect(mapStateToProps)(TeamList);","import React from 'react';\n\nconst HomeButton = ({ homeOrAway, handleClick }) => {\n\n    return (\n        <div className=\"home-container\">\n\n            <p className=\"text-xsmall\">Click to switch</p>\n\n            {/* button toggles between 'home' and 'away' when clicked */}\n            <button \n            onClick={ handleClick }\n            className={ homeOrAway ? \"btn-large btn-active\" : \"btn-large\" } \n            >\n                { homeOrAway ? \"Home\" : \"Away\" }\n            </button>\n\n        </div>\n    );\n\n};\n\nexport default HomeButton;","import { connect } from \"react-redux\";\nimport HomeButton from './HomeButton';\nimport { toggleHome } from '../../data/action';\n\nconst mapStateToProps = ({ home }) => ({ homeOrAway: home === 1 });\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleClick: () => { \n            dispatch(toggleHome());\n        }\n    };\n    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeButton);","import { connect } from \"react-redux\";\nimport HomeButton from './HomeButton';\nimport { toggleHome } from '../../data/action';\n\nconst mapStateToProps = ({ home }) => ({ homeOrAway: home === 2 });\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleClick: () => { \n            dispatch(toggleHome());\n        }\n    };\n    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeButton);","import React, { Component } from 'react';\nimport { CirclePicker } from 'react-color';\n\nclass ColorPicker extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            color: \"\"\n        };\n\n        this.handleChangeComplete = this.handleChangeComplete.bind(this);\n    };\n\n    //pass color value up to state onChangeComplete\n    handleChangeComplete = color => {\n        this.props.handleColor(color.hex);\n    };\n\n    render() {\n        \n        return (\n\n            !this.props.teamsGenerated ? null :\n\n            <div>\n\n                <p className=\"text-small\">Pick team colour</p>\n\n                <CirclePicker\n                colors={ [\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#2196f3\", \"#03a9f4\", \"#00bcd4\", \"#009688\", \"#4caf50\", \"#8bc34a\", \"#cddc39\", \"#ff9800\", \"#ff5722\", \"#795548\", \"#607d8b\"] }\n                circleSize={ 23 }\n                circleSpacing={ 10 }\n                onChangeComplete={ this.handleChangeComplete }\n                />\n                \n            </div>\n        );\n    };\n\n};\n\nexport default ColorPicker;","import { connect } from \"react-redux\";\nimport ColorPicker from './ColorPicker';\nimport { setColor1 } from '../../data/action';\n\nconst mapStateToProps = ({ teamsGenerated }) => ({ teamsGenerated });\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleColor: data => { \n            dispatch(setColor1(data));\n        }\n    };\n    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColorPicker);","import { connect } from \"react-redux\";\nimport ColorPicker from './ColorPicker';\nimport { setColor2 } from '../../data/action';\n\nconst mapStateToProps = ({ teamsGenerated }) => ({ teamsGenerated });\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleColor: data => { \n            dispatch(setColor2(data));\n        }\n    };\n    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColorPicker);","/*\n* default/built in settings\n*/\n\nexport const defaultNumberOfPlayers = 5;\n\nexport const minNoOfPlayers = 2;\n\nexport const maxNoOfPlayers = 20;\n\nexport const homeAdvantage = 0.15;\n\nexport const teamName = team => {\n\n    switch(team) {\n        case 1: return \"Team 1\";\n        case 2: return \"Team 2\";\n        default: return \"Unnamed team\";\n    };\n    \n};","import React from 'react';\nimport TeamList1 from '../TeamList/TeamList1';\nimport TeamList2 from '../TeamList/TeamList2';\nimport HomeButton1 from '../HomeButton/HomeButton1';\nimport HomeButton2 from '../HomeButton/HomeButton2';\nimport ColorPicker1 from '../ColorPicker/ColorPicker1';\nimport ColorPicker2 from '../ColorPicker/ColorPicker2';\nimport { teamName } from '../../data/settings';\n\nconst TeamStaging = ({ teamsGenerated }) => {\n\n    return (\n        <section>\n\n            <section>\n\n                <header className=\"header-team-1\">\n                    <h2 className=\"title-sub\">{ teamName(1) }</h2>\n                </header> \n\n                <div className=\"team-list-1\">\n\n                    {/* show team list and color picker when teams have been generated */}\n                    { !teamsGenerated ? null :\n                        <>\n                            <TeamList1 />\n\n                            <ColorPicker1 />\n                        </>\n                    }\n\n                </div>\n\n                <div className=\"home-btn-container-1\">\n                    <HomeButton1 />\n                </div>\n\n            </section>\n\n            <section>\n\n                <header className=\"header-team-2\">\n                    <h2 className=\"title-sub\">{ teamName(2) }</h2>\n                </header>\n\n                <div className=\"team-list-2\">\n\n                    {/* show team list and color picker when teams have been generated */}\n                    { !teamsGenerated ? null :\n                        <>\n                            <TeamList2 />\n\n                            <ColorPicker2 />\n                        </>\n                    }\n\n                </div>\n                \n                <div className=\"home-btn-container-2\">\n                    <HomeButton2 />\n                </div>\n\n            </section>\n\n        </section>\n    );\n\n};\n\nexport default TeamStaging;","import { connect } from \"react-redux\";\nimport TeamStaging from './TeamStaging';\n\nconst mapStateToProps = ({ teamsGenerated }) => ({ teamsGenerated });\n\nexport default connect(mapStateToProps)(TeamStaging);","import React from 'react';\nimport { teamName } from '../../data/settings';\n\nconst Predictions = ({ \n    predictions, \n    showPredictions, \n    handleClick, \n    homeAdvantage \n}) => {\n\n    const { \n        favourite, \n        unfavourite, \n        favouriteHome, \n        favouriteSkills, \n        unfavouriteSkills \n    } = predictions;\n\n    return (\n        <section>\n\n            <button \n                onClick={ handleClick }\n                className=\"btn-medium btn-predictions\"\n            >Get predictions</button>\n\n            { !showPredictions ? null :\n\n                <div className=\"predictions-text\">\n\n                    <p className=\"text-card-small\">\n\n                        { favouriteHome ? \n                            `Benefiting from a home advantage, ` :\n                            `Despite team ${ unfavourite } having the home advantage, `\n                        }\n                        { teamName(favourite) } are tipped to win, with an adjusted skills rating* of { favouriteSkills } ({ teamName(unfavourite) }: { unfavouriteSkills })\n\n                    </p>\n\n                    <p className=\"text-card-small\">\n                        *skills ratings assume a { homeAdvantage * 100 }% uplift for the home team\n                    </p>\n\n                </div>\n            }\n            \n        </section>\n    );\n\n};\n\nexport default Predictions;","import { connect } from \"react-redux\";\nimport Predictions from './Predictions';\nimport { getPredictions } from '../../data/action';\n\nconst mapStateToProps = ({ predictions, showPredictions }) => ({ predictions, showPredictions });\n\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        handleClick: () => { \n            dispatch(getPredictions());\n        }\n    };\n    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Predictions);","import React from 'react';\n\nconst TeamKit = ({ name, color, home }) => {\n\n    let homeOrAway = home ? \"H\" : \"A\";\n\n    return (\n        <>\n            <h2 className=\"title-sub\">\n                { name + \" (\" + homeOrAway + \")\" }\n            </h2>\n\n            <div \n                className=\"icon-container\"\n                style={{ backgroundColor: color }}\n            >\n\n                <img \n                    src={require(\"../../assets/icons/tshirt.svg\")} \n                    alt=\"team kit\"\n                    className=\"icon\"\n                />\n\n            </div>\n        </>\n    );\n\n};\n\nexport default TeamKit;","import React from 'react';\nimport TeamList1 from '../TeamList/TeamList1';\nimport TeamList2 from '../TeamList/TeamList2';\nimport TeamKit from '../TeamKit';\nimport { teamName } from '../../data/settings';\n\nconst TeamConfirmed = ({ \n    color1, \n    color2, \n    home \n}) => {\n\n    return (\n        <>\n            <div className=\"team-list-1-final\">\n\n                <TeamList1 />\n\n                <TeamKit\n                name={ teamName(1) }\n                color={ color1 }\n                home={ home === 1 }\n                />\n\n            </div>\n\n            <div className=\"team-list-2-final\">\n\n                <TeamList2 />\n\n                <TeamKit\n                name={ teamName(2) }\n                color={ color2 }\n                home={ home === 2 } \n                />\n\n            </div>\n            \n        </>\n    );\n\n};\n\nexport default TeamConfirmed;","import { connect } from \"react-redux\";\nimport TeamConfirmed from './TeamConfirmed';\n\nconst mapStateToProps = ({ color1, color2, home }) => ({ color1, color2, home });\n\nexport default connect(mapStateToProps)(TeamConfirmed);","import React from 'react';\nimport ControlPanel from '../ControlPanel/';\nimport PlayerList from '../PlayerList/';\nimport TeamStaging from '../TeamStaging/';\nimport Predictions from '../Predictions/';\nimport { minNoOfPlayers, maxNoOfPlayers, homeAdvantage } from '../../data/settings';\nimport ResetButton from '../_ControlPanelComponents/ResetButton';\nimport TeamConfirmed from '../TeamConfirmed';\n\nconst Main = ({ teamsConfirmed }) => {\n\n    return (\n        <main>\n\n            { !teamsConfirmed ?\n                //show this before teams are confirmed\n                <>\n\n                    <ControlPanel \n                        max={ maxNoOfPlayers }\n                        min={ minNoOfPlayers } \n                    />\n\n                    <PlayerList />\n            \n                    <TeamStaging />\n\n                </> :\n                //show this after teams have been confirmed\n                <>\n                    <TeamConfirmed />\n                    \n                    <div className=\"predictions-container\">\n\n                        <Predictions homeAdvantage={ homeAdvantage }/>\n                        \n                        <div className=\"reset-final\">\n                            <ResetButton />\n                        </div>\n                        \n                    </div>\n\n                </>\n\n            }\n            \n        </main>\n    );\n\n};\n\nexport default Main;","import { connect } from 'react-redux';\nimport Main from './Main';\n\nconst mapStateToProps = ({ teamsConfirmed }) => ({ teamsConfirmed });\n\nexport default connect(mapStateToProps)(Main);","import React from 'react';\nimport './App.scss';\nimport Header from './components/Header/';\nimport Main from './components/Main';\n\n\nfunction App() {\n  \n  return (\n\n    <div className=\"container\">\n\n      <Header />\n        \n      <Main />\n\n    </div>\n\n  );\n  \n};\n\nexport default App;\n","import { defaultNumberOfPlayers } from './settings';\n\n//set initial state\nconst initial = {\n    numberOfPlayers: defaultNumberOfPlayers,\n    tooManyPlayers: false,\n\n    playerInputComplete: false,\n    balanced: false,\n    teamsGenerated: false,\n    teamsConfirmed: false,\n\n    players: [],\n    playersTeam1: [],\n    playersTeam2: [],\n\n    color1: \"\",\n    color2: \"\",\n    home: 1,\n\n    showPredictions: false,\n    predictions: {},\n};\n\nexport default initial;","/*\n* increase or decrease the number of players per team\n*/\n\nconst changeNoOfPlayers = (state, { value }) => {\n\n    return {\n        ...state,\n        numberOfPlayers: state.numberOfPlayers + value,\n    };\n    \n};\n\nexport default changeNoOfPlayers;","/*\n* add a player (object containing name and skill properties)\n*/\n\nconst addPlayer = (state, { data }) => {\n\n    return {\n        ...state,\n        players: [\n            ...state.players, \n            { name: data.playerName, skill: data.playerSkill }\n        ]\n    };\n    \n};\n\nexport default addPlayer;","/*\n* delete a player\n*/\n\nconst deletePlayer = (state, action) => {\n    \n    //returns array of players excluding the index specified in the action payload\n    let newPlayers = state.players.filter((player, index) => {\n\n        return index !== action.index;\n\n    });\n    \n    return {\n        ...state,\n        players: newPlayers,\n    };\n};\n\nexport default deletePlayer;","/*\n* check whether enough (or too many) players have been added given\n* the specified number of players per team\n*/\n\nconst checkNoOfPlayers = state => {\n    \n    const currentNoOfPlayers = state.players.length;\n    \n    //check number of players added is twice that of the number of players per team\n    const enoughPlayers = currentNoOfPlayers === state.numberOfPlayers * 2;\n\n    //check if too many players have been added\n    const tooManyPlayers = currentNoOfPlayers > state.numberOfPlayers * 2;\n\n    return { \n        ...state, \n        playerInputComplete: enoughPlayers,\n        tooManyPlayers, \n    };\n\n};\n\nexport default checkNoOfPlayers;","/*\n* takes an array and returns another array with the same values in a random \n* order\n*/\n\nexport const shuffle = arr => {\n\n    //make a copy of the array\n    let result = [...arr];\n    \n    //identify last item in the array (highest index)\n    let maxIndex = result.length - 1;\n\n    //loop through array from highest index to index 0\n    for (let i = maxIndex; i > 0; i -= 1) {\n    \n        //generate random index (between 0 and current index)\n        let randomIndex = Math.floor(Math.random() * i);\n    \n        //save value of current index\n        let currentValue = result[i];\n    \n        //swap the values of the current index and the random index:\n\n        //set the value of the current index to the value of the random index\n        result[i] = result[randomIndex];\n    \n        //set the value of the random index to the value of the current index\n        result[randomIndex] = currentValue;\n    \n    };\n\n    return result;\n\n};\n\n\n/*\n* orders a players array by skill level\n*/\n\nexport const orderBySkill = arr => {\n\n    return arr.sort((a, b) => a.skill - b.skill);\n\n};\n\n\n/*\n* checks an array can be divided into n equal parts\n*/\n\nexport const isDivisible = (arr, n) => arr.length % n === 0;\n\n\n/*\n* takes an array and returns another array containing n arrays, whereby    \n* items are allocated in turn to each array \n* (eg. index 0 => team1, index 1 => team2, index 2 => team1, etc)\n*/\n\nexport const splitArrays = (arr, n) => {\n    \n    //check if array can't be split into n arrays\n    if (!isDivisible(arr, n)) {\n        return \"Can't generate equal teams\";\n    };\n\n    let container = [];\n\n    for (let i = 0; i < n; i += 1) {\n\n        //populate container array with arrays filtered by modulus of index\n        container.push(arr.filter((item, index) => index % n === i));\n\n    };\n\n    return container;\n};\n\n\n/*\n* generates teams randomly\n*/\n\nexport const randomTeams = (players, numberOfTeams) => {\n\n    return splitArrays(shuffle(players), numberOfTeams);\n\n};\n\n\n/*\n* generates teams whereby skill level is balanced as far as possible\n*/\n\nexport const balancedTeams = (players, numberOfTeams) => {\n\n    return splitArrays(orderBySkill(players), numberOfTeams);\n\n};","/*\n* generate teams, depending on whether the user has opted\n* for random or balanced team allocation. See teamPicker.js\n*/\n\n//logic\nimport { randomTeams, balancedTeams } from './teamPicker';\n\nconst generateTeams = state => {\n\n    const players = state.players;\n\n    const teams = state.balanced ? balancedTeams(players, 2) : randomTeams(players, 2);\n\n    //allocate the resulting array of arrays to teams\n    //note that team2 will always have the advantage when teams are balanced\n    const team1 = teams[0];\n    const team2 = teams[1];\n\n    return {\n        ...state,\n        playersTeam1: team1,\n        playersTeam2: team2,\n        teamsGenerated: true,\n        players: [],\n    };\n\n};\n\nexport default generateTeams;","/*\n* toggle between random and balanced teams\n*/\n\nconst toggleBalanced = state => {\n\n    return {\n        ...state,\n        balanced: !state.balanced,\n    };\n    \n};\n\nexport default toggleBalanced;","/*\n* toggle the home team\n*/\n\nconst toggleHome = state => {\n\n    let currentHomeTeam = state.home;\n\n    let newHomeTeam = currentHomeTeam === 1 ? 2 : 1;\n\n    return {\n        ...state,\n        home: newHomeTeam,\n    };\n    \n};\n\nexport default toggleHome;","import { homeAdvantage } from '../settings';\n\n\n/*\n* takes a team (an array of player objects) and returns the total\n* skills value (number)\n*/\n\nexport const totalTeamSkills = team => {\n    \n    return team.map(player => player.skill).reduce((total, skill) => total + skill);\n\n};\n\n\n/*\n* returns a new total skills value augmented to reflect the home \n* advantage\n*/\n\nexport const addHomeAdvantage = totalSkills => {\n\n    let advantage = totalSkills * homeAdvantage;\n\n    return totalSkills + advantage; \n\n};\n\n\n/*\n* takes two teams (arrays of player objects) and a number\n* representing the home team, and returns an object\n* containing the teams' total skills values\n*/\n\nexport const calculateScores = (team1, team2, home) => {\n    \n    let team1Total = home === 1 ? addHomeAdvantage(totalTeamSkills(team1)) : totalTeamSkills(team1);\n\n    let team2Total = home === 2 ? addHomeAdvantage(totalTeamSkills(team2)) : totalTeamSkills(team2);\n    \n    return {\n        team1Total,\n        team2Total,\n    };\n};\n\n\n/*\n* takes a scores object (see above) and returns a number\n* representing the favourite team\n*/\n\nexport const calculateFavourite = scores => {\n\n    return Math.max(scores.team1Total, scores.team2Total) === scores.team1Total ? 1 : 2;\n    \n};","/*\n* calculate: \n* - the favourite team, \n* - whether the favourite team had the home advantage,\n* - the favourite team's total skills value\n* - the other team's total skills value.\n* See predictor.js\n*/\n\n//logic\nimport { calculateFavourite, calculateScores } from './predictor';\n\nconst getPredictions = state => {\n    \n    const { playersTeam1, playersTeam2, home } = state;\n\n    //returns an object containing the teams' total skills values\n    let scores = calculateScores(playersTeam1, playersTeam2, home);\n\n    //returns a number representing the favourite team\n    let favourite = calculateFavourite(scores);\n\n    //set the 'unfavourite' team\n    let unfavourite = favourite === 1 ? 2 : 1;\n\n    //returns a boolean - did the favourite benefit from a home advantage\n    let favouriteHome = favourite === home;\n\n    //returns the favourite team's total skills value (number)\n    let favouriteSkills = favourite === 1 ? scores.team1Total.toFixed(2) : scores.team2Total.toFixed(2);\n\n    //returns the other team's total skills value (number)\n    let unfavouriteSkills = favourite === 1 ? scores.team2Total.toFixed(2) : scores.team1Total.toFixed(2);\n\n    return {\n        ...state,\n        predictions: {\n            ...state.predictions,\n            favourite,\n            unfavourite,\n            favouriteHome,\n            favouriteSkills,\n            unfavouriteSkills,\n        },\n        showPredictions: true,\n    };\n};\n\nexport default getPredictions;","/*\n* teams have been confirmed\n*/\n\nconst showTeams = state => {\n\n    return {\n        ...state,\n        teamsConfirmed: true,\n    };\n    \n};\n\nexport default showTeams;","/*\n* sets team colours\n*/\n\nconst setColor = (state, { team, color }) => {\n    \n    let color1 = team === 1 ? color : state.color1;\n\n    let color2 = team === 2 ? color : state.color2;\n    \n    return {\n        ...state,\n        color1,\n        color2,\n    };\n};\n\nexport default setColor;","//initial state\nimport initialState from '../initial';\n\n//reducer functions\nimport changeNoOfPlayers from './changeNoOfPlayers';\nimport addPlayer from './addPlayer';\nimport deletePlayer from './deletePlayer';\nimport checkNoOfPlayers from './checkNoOfPlayers';\nimport generateTeams from './generateTeams';\nimport toggleBalanced from './toggleBalanced';\nimport toggleHome from './toggleHome';\nimport getPredictions from './getPredictions';\nimport showTeams from './showTeams';\nimport setColor from './setColor';\n\n\n//reducer\nconst reducer = (state, action) => {\n    switch(action.type) {\n        \n        case \"CHANGE_NO_OF_PLAYERS\": return checkNoOfPlayers(changeNoOfPlayers(state, action));\n\n        case \"ADD_PLAYER\": return checkNoOfPlayers(addPlayer(state, action));\n\n        case \"DELETE_PLAYER\": return checkNoOfPlayers(deletePlayer(state, action));\n\n        case \"TOGGLE_BALANCED\": return toggleBalanced(state);\n\n        case \"GENERATE_TEAMS\": return generateTeams(state);\n\n        case \"TOGGLE_HOME\": return toggleHome(state);\n\n        case \"GET_PREDICTIONS\": return getPredictions(state);\n\n        case \"SHOW_TEAMS\": return showTeams(state);\n\n        case \"SET_COLOR\": return setColor(state, action);\n\n        case \"RESET\": return initialState;\n\n        default: return state;\n\n    };\n};\n\nexport default reducer;","import { createStore, compose } from 'redux';\nimport persistState from 'redux-localstorage';\nimport reducer from './reducer/reducer';\nimport initial from './initial';\n\n//localstorage middleware and redux dev tools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// setup store\nconst store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(persistState()),\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './data/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}